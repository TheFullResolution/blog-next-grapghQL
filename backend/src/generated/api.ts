// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import { BlogPost } from '../models/datamodel'
import { Context } from '../models/context'

export type BlogPostOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'body_ASC'
  | 'body_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface BlogPostWhereInput {
    id?: string | null
    id_not?: string | null
    id_in?: string[] | null
    id_not_in?: string[] | null
    id_lt?: string | null
    id_lte?: string | null
    id_gt?: string | null
    id_gte?: string | null
    id_contains?: string | null
    id_not_contains?: string | null
    id_starts_with?: string | null
    id_not_starts_with?: string | null
    id_ends_with?: string | null
    id_not_ends_with?: string | null
    title?: string | null
    title_not?: string | null
    title_in?: string[] | null
    title_not_in?: string[] | null
    title_lt?: string | null
    title_lte?: string | null
    title_gt?: string | null
    title_gte?: string | null
    title_contains?: string | null
    title_not_contains?: string | null
    title_starts_with?: string | null
    title_not_starts_with?: string | null
    title_ends_with?: string | null
    title_not_ends_with?: string | null
    body?: string | null
    body_not?: string | null
    body_in?: string[] | null
    body_not_in?: string[] | null
    body_lt?: string | null
    body_lte?: string | null
    body_gt?: string | null
    body_gte?: string | null
    body_contains?: string | null
    body_not_contains?: string | null
    body_starts_with?: string | null
    body_not_starts_with?: string | null
    body_ends_with?: string | null
    body_not_ends_with?: string | null
    updatedAt?: string | null
    updatedAt_not?: string | null
    updatedAt_in?: string[] | null
    updatedAt_not_in?: string[] | null
    updatedAt_lt?: string | null
    updatedAt_lte?: string | null
    updatedAt_gt?: string | null
    updatedAt_gte?: string | null
    createdAt?: string | null
    createdAt_not?: string | null
    createdAt_in?: string[] | null
    createdAt_not_in?: string[] | null
    createdAt_lt?: string | null
    createdAt_lte?: string | null
    createdAt_gt?: string | null
    createdAt_gte?: string | null
    AND?: BlogPostWhereInput[] | null
    OR?: BlogPostWhereInput[] | null
    NOT?: BlogPostWhereInput[] | null
  }
  export interface BlogPostWhereUniqueInput {
    id?: string | null
  }

  export interface ArgsBlogPosts {
    where?: BlogPostWhereInput | null
    orderBy?: BlogPostOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }

  export interface ArgsBlogPost {
    where: BlogPostWhereUniqueInput
  }

  export type BlogPostsResolver =
    | ((
        parent: undefined,
        args: ArgsBlogPosts,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Array<BlogPost | null> | Promise<Array<BlogPost | null>>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsBlogPosts,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Array<BlogPost | null> | Promise<Array<BlogPost | null>>
      }

  export type BlogPostResolver =
    | ((
        parent: undefined,
        args: ArgsBlogPost,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => BlogPost | null | Promise<BlogPost | null>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsBlogPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlogPost | null | Promise<BlogPost | null>
      }

  export interface Type {
    blogPosts:
      | ((
          parent: undefined,
          args: ArgsBlogPosts,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Array<BlogPost | null> | Promise<Array<BlogPost | null>>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsBlogPosts,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Array<BlogPost | null> | Promise<Array<BlogPost | null>>
        }

    blogPost:
      | ((
          parent: undefined,
          args: ArgsBlogPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlogPost | null | Promise<BlogPost | null>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsBlogPost,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => BlogPost | null | Promise<BlogPost | null>
        }
  }
}

export namespace BlogPostResolvers {
  export const defaultResolvers = {
    id: (parent: BlogPost) => parent.id,
    title: (parent: BlogPost) => parent.title,
    body: (parent: BlogPost) => parent.body,
    updatedAt: (parent: BlogPost) => parent.updatedAt,
    createdAt: (parent: BlogPost) => parent.createdAt,
  }

  export type IdResolver =
    | ((
        parent: BlogPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type TitleResolver =
    | ((
        parent: BlogPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type BodyResolver =
    | ((
        parent: BlogPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type UpdatedAtResolver =
    | ((
        parent: BlogPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export type CreatedAtResolver =
    | ((
        parent: BlogPost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string
        resolve: (
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>
      }

  export interface Type {
    id:
      | ((
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: BlogPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    title:
      | ((
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: BlogPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    body:
      | ((
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: BlogPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    updatedAt:
      | ((
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: BlogPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }

    createdAt:
      | ((
          parent: BlogPost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string
          resolve: (
            parent: BlogPost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>
        }
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface ArgsCreateBlogPost {
    title?: string | null
    body?: string | null
  }

  export type CreateBlogPostResolver =
    | ((
        parent: undefined,
        args: ArgsCreateBlogPost,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => BlogPost | null | Promise<BlogPost | null>)
    | {
        fragment: string
        resolve: (
          parent: undefined,
          args: ArgsCreateBlogPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlogPost | null | Promise<BlogPost | null>
      }

  export interface Type {
    createBlogPost:
      | ((
          parent: undefined,
          args: ArgsCreateBlogPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => BlogPost | null | Promise<BlogPost | null>)
      | {
          fragment: string
          resolve: (
            parent: undefined,
            args: ArgsCreateBlogPost,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => BlogPost | null | Promise<BlogPost | null>
        }
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  BlogPost: BlogPostResolvers.Type
  Mutation: MutationResolvers.Type
}

// @ts-ignore
declare module 'graphql-tools' {
  interface IResolvers extends Resolvers {}
}
