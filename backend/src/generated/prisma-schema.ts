// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBlogPost {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BlogPost {
  id: ID!
  title: String!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type BlogPostConnection {
  pageInfo: PageInfo!
  edges: [BlogPostEdge]!
  aggregate: AggregateBlogPost!
}

input BlogPostCreateInput {
  id: ID
  title: String!
  body: String!
}

type BlogPostEdge {
  node: BlogPost!
  cursor: String!
}

enum BlogPostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BlogPostPreviousValues {
  id: ID!
  title: String!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type BlogPostSubscriptionPayload {
  mutation: MutationType!
  node: BlogPost
  updatedFields: [String!]
  previousValues: BlogPostPreviousValues
}

input BlogPostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlogPostWhereInput
  AND: [BlogPostSubscriptionWhereInput!]
  OR: [BlogPostSubscriptionWhereInput!]
  NOT: [BlogPostSubscriptionWhereInput!]
}

input BlogPostUpdateInput {
  title: String
  body: String
}

input BlogPostUpdateManyMutationInput {
  title: String
  body: String
}

input BlogPostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  NOT: [BlogPostWhereInput!]
}

input BlogPostWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBlogPost(data: BlogPostCreateInput!): BlogPost!
  updateBlogPost(data: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost
  updateManyBlogPosts(data: BlogPostUpdateManyMutationInput!, where: BlogPostWhereInput): BatchPayload!
  upsertBlogPost(where: BlogPostWhereUniqueInput!, create: BlogPostCreateInput!, update: BlogPostUpdateInput!): BlogPost!
  deleteBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  deleteManyBlogPosts(where: BlogPostWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  blogPost(where: BlogPostWhereUniqueInput!): BlogPost
  blogPosts(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlogPost]!
  blogPostsConnection(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogPostConnection!
  node(id: ID!): Node
}

type Subscription {
  blogPost(where: BlogPostSubscriptionWhereInput): BlogPostSubscriptionPayload
}
`